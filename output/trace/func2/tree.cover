    1: import logging
       
    1: import settings
       
    1: from typing import List, Union, Tuple
    1: from dataclasses import dataclass, field
       
    1: from rational import Rational
    1: from function import FunctionTypes, PolynomialFunction
       
    1: app_logger = logging.getLogger(settings.APP_NAME)
       
       
    2: @dataclass
    1: class Node:
    1:     size: str
    1:     c: Union[Rational, str]
    1:     op: FunctionTypes
    1:     denominator: Union[Rational, int]
    1:     power: Union[Rational, int]
       
    1:     @property
    1:     def cost(self):
    8:         return f'{self.c}(n{self.op.value}{self.denominator})^{self.power}'
       
    1:     @classmethod
    1:     def from_func(cls, func: PolynomialFunction, layer: int):
    4:         recursive_den: int = (func.b * 2 * layer) ** func.d
    4:         app_logger.debug(f'Generating node for layer: {layer}')
    4:         app_logger.debug(f'Denominator of recursive size: {func.b} ** {layer} = {func.b ** layer}')
    8:         return cls(
    4:             f'T(n{func.op.value}{func.b ** layer})',
    4:             func.c, func.op, recursive_den, func.d
               )
       
    1:     def __repr__(self):
    4:         return f'[{self.size}, Cost: {self.cost}]'
       
       
    2: @dataclass
    1: class Tree:
    1:     head: Tuple[Union[Node, None], str] = field(default_factory=tuple)
    1:     layer1: Tuple[List[Node], str] = field(default_factory=tuple)
    1:     layer2: Tuple[List[Node], str] = field(default_factory=tuple)
    1:     layer3: Tuple[List[Node], str] = field(default_factory=tuple)
       
    1:     def _compute_total_cost(self, layer: List[Node]):
    4:         num_nodes: int = len(layer)
    4:         app_logger.debug(f'Num nodes in layer: {num_nodes}')
    4:         if num_nodes > 1:
                   head: Node = layer[0]
                   denominator: int = Rational(f'{head.denominator}') ** head.power
                   frac: Rational = Rational(f'{num_nodes}/{denominator}')
                   frac.reduce()
                   return f'({frac}){head.cost}'
    4:         elif num_nodes == 1:
    4:             return layer[0].cost
       
    1:     def get_layer(self, layer: int):
               if layer == 0:
                   return self.head
               elif layer == 1:
                   return self.layer1
               elif layer == 2:
                   return self.layer2
               else:
                   return self.layer3
       
    1:     def append(self, data: List[Node], layer: int):
    4:         if layer == 0:
    1:             self.head = list(self.head)
    1:             self.head.append(data)
    1:             self.head.append(self._compute_total_cost(data))
    1:             self.head = tuple(self.head)
    3:         elif layer == 1:
    1:             self.layer1 = list(self.layer1)
    1:             self.layer1.append(data)
    1:             self.layer1.append(self._compute_total_cost(data))
    1:             self.layer1 = tuple(self.layer1)
    2:         elif layer == 2:
    1:             self.layer2 = list(self.layer2)
    1:             self.layer2.append(data)
    1:             self.layer2.append(self._compute_total_cost(data))
    1:             self.layer2 = tuple(self.layer2)
               else:
    1:             self.layer3 = list(self.layer3)
    1:             self.layer3.append(data)
    1:             self.layer3.append(self._compute_total_cost(data))
    1:             self.layer3 = tuple(self.layer3)
       
    1:     def __repr__(self):
   19:         return f'\n-- HEAD --\n' + str(self.head) + '\n' + \
    2:                f'-- Layer 1 --' + '\n' + \
    2:                f'-- Total cost: {self.layer1[1]} --' + '\n' + \
    2:                f'{str(self.layer1[0])}' + '\n' + \
    2:                f'-- Layer 2 --' + '\n' + \
    2:                f'-- Total cost: {self.layer2[1]} --' + '\n' + \
    2:                f'{str(self.layer2[0])}' + '\n' + \
    2:                f'-- Layer 3 --' + '\n' + \
    2:                f'-- Total cost: {self.layer3[1]} --' + '\n' + \
    2:                f'{str(self.layer3[0])}' + '\n'
