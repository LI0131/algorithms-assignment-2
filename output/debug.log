============================= test session starts ==============================
platform darwin -- Python 3.9.6, pytest-6.2.5, py-1.10.0, pluggy-1.0.0
rootdir: /Users/liammccann/Documents/masters_files/algorithms/programming_assignments/algorithms-assignment-2
collected 8 items / 2 deselected / 6 selected

test/test_algo.py::test_dnc_func_1 
-------------------------------- live log call ---------------------------------
DEBUG    settings:test_algo.py:14 Testing function: T(n) = 2T(n/2) + Theta(n)
DEBUG    settings:function.py:133 Parsed Theta cost function: cn
DEBUG    settings:function.py:42 Division expression found in incoming function
DEBUG    settings:function.py:63 Printing match: 2T(n/2)
DEBUG    settings:tree.py:29 Generating node for layer: 0
DEBUG    settings:rational.py:53 Power is an integer: 0
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 2 ** 0 = 1
DEBUG    settings:rational.py:53 Power is an integer: 0
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:49 Num nodes in layer: 1
DEBUG    settings:tree.py:29 Generating node for layer: 1
DEBUG    settings:rational.py:53 Power is an integer: 1
DEBUG    settings:rational.py:56 Results: 2/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 2 ** 1 = 2
DEBUG    settings:rational.py:53 Power is an integer: 1
DEBUG    settings:rational.py:56 Results: 2/1
DEBUG    settings:tree.py:49 Num nodes in layer: 2
DEBUG    settings:tree.py:29 Generating node for layer: 2
DEBUG    settings:rational.py:53 Power is an integer: 2
DEBUG    settings:rational.py:56 Results: 4/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 2 ** 2 = 4
DEBUG    settings:rational.py:53 Power is an integer: 2
DEBUG    settings:rational.py:56 Results: 4/1
DEBUG    settings:tree.py:49 Num nodes in layer: 4
DEBUG    settings:tree.py:29 Generating node for layer: 3
DEBUG    settings:rational.py:53 Power is an integer: 3
DEBUG    settings:rational.py:56 Results: 8/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 2 ** 3 = 8
DEBUG    settings:rational.py:53 Power is an integer: 3
DEBUG    settings:rational.py:56 Results: 8/1
DEBUG    settings:tree.py:49 Num nodes in layer: 8
DEBUG    settings:test_algo.py:17 Created Tree Result: 
-- HEAD --
([[T(n/1), Cost: c(n/0)^1]], 'c(n/0)^1')
-- Layer 1 --
-- Total cost: ((1/2))c(n/4)^1 --
[[T(n/2), Cost: c(n/4)^1], [T(n/2), Cost: c(n/4)^1]]
-- Layer 2 --
-- Total cost: ((1/2))c(n/8)^1 --
[[T(n/4), Cost: c(n/8)^1], [T(n/4), Cost: c(n/8)^1], [T(n/4), Cost: c(n/8)^1], [T(n/4), Cost: c(n/8)^1]]
-- Layer 3 --
-- Total cost: ((2/3))c(n/12)^1 --
[[T(n/8), Cost: c(n/12)^1], [T(n/8), Cost: c(n/12)^1], [T(n/8), Cost: c(n/12)^1], [T(n/8), Cost: c(n/12)^1], [T(n/8), Cost: c(n/12)^1], [T(n/8), Cost: c(n/12)^1], [T(n/8), Cost: c(n/12)^1], [T(n/8), Cost: c(n/12)^1]]

PASSED                                                                   [ 16%]
test/test_algo.py::test_dnc_func_2 
-------------------------------- live log call ---------------------------------
DEBUG    settings:test_algo.py:22 Testing function: T(n) = 7T(n/2) + Theta(n^2)
DEBUG    settings:function.py:133 Parsed Theta cost function: cn^2
DEBUG    settings:function.py:42 Division expression found in incoming function
DEBUG    settings:function.py:63 Printing match: 7T(n/2)
DEBUG    settings:tree.py:29 Generating node for layer: 0
DEBUG    settings:rational.py:53 Power is an integer: 0
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 2 ** 0 = 1
DEBUG    settings:rational.py:53 Power is an integer: 0
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:49 Num nodes in layer: 1
DEBUG    settings:tree.py:29 Generating node for layer: 1
DEBUG    settings:rational.py:53 Power is an integer: 1
DEBUG    settings:rational.py:56 Results: 2/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 2 ** 1 = 2
DEBUG    settings:rational.py:53 Power is an integer: 1
DEBUG    settings:rational.py:56 Results: 2/1
DEBUG    settings:tree.py:49 Num nodes in layer: 7
DEBUG    settings:tree.py:29 Generating node for layer: 2
DEBUG    settings:rational.py:53 Power is an integer: 2
DEBUG    settings:rational.py:56 Results: 4/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 2 ** 2 = 4
DEBUG    settings:rational.py:53 Power is an integer: 2
DEBUG    settings:rational.py:56 Results: 4/1
DEBUG    settings:tree.py:49 Num nodes in layer: 49
DEBUG    settings:tree.py:29 Generating node for layer: 3
DEBUG    settings:rational.py:53 Power is an integer: 3
DEBUG    settings:rational.py:56 Results: 8/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 2 ** 3 = 8
DEBUG    settings:rational.py:53 Power is an integer: 3
DEBUG    settings:rational.py:56 Results: 8/1
DEBUG    settings:tree.py:49 Num nodes in layer: 343
DEBUG    settings:test_algo.py:25 Created Tree Result: 
-- HEAD --
([[T(n/1), Cost: c(n/0)^2]], 'c(n/0)^2')
-- Layer 1 --
-- Total cost: ((7/256))c(n/16)^2 --
[[T(n/2), Cost: c(n/16)^2], [T(n/2), Cost: c(n/16)^2], [T(n/2), Cost: c(n/16)^2], [T(n/2), Cost: c(n/16)^2], [T(n/2), Cost: c(n/16)^2], [T(n/2), Cost: c(n/16)^2], [T(n/2), Cost: c(n/16)^2]]
-- Layer 2 --
-- Total cost: ((49/4096))c(n/64)^2 --
[[T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2]]
-- Layer 3 --
-- Total cost: ((343/20736))c(n/144)^2 --
[[T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2], [T(n/8), Cost: c(n/144)^2]]

PASSED                                                                   [ 33%]
test/test_algo.py::test_dnc_func_3 
-------------------------------- live log call ---------------------------------
DEBUG    settings:test_algo.py:30 Testing function: T(n) = 3T(n/4) + cn^2
DEBUG    settings:function.py:125 Printing function match: cn^2
DEBUG    settings:function.py:42 Division expression found in incoming function
DEBUG    settings:function.py:63 Printing match: 3T(n/4)
DEBUG    settings:tree.py:29 Generating node for layer: 0
DEBUG    settings:rational.py:53 Power is an integer: 0
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 4 ** 0 = 1
DEBUG    settings:rational.py:53 Power is an integer: 0
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:49 Num nodes in layer: 1
DEBUG    settings:tree.py:29 Generating node for layer: 1
DEBUG    settings:rational.py:53 Power is an integer: 1
DEBUG    settings:rational.py:56 Results: 4/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 4 ** 1 = 4
DEBUG    settings:rational.py:53 Power is an integer: 1
DEBUG    settings:rational.py:56 Results: 4/1
DEBUG    settings:tree.py:49 Num nodes in layer: 3
DEBUG    settings:tree.py:29 Generating node for layer: 2
DEBUG    settings:rational.py:53 Power is an integer: 2
DEBUG    settings:rational.py:56 Results: 16/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 4 ** 2 = 16
DEBUG    settings:rational.py:53 Power is an integer: 2
DEBUG    settings:rational.py:56 Results: 16/1
DEBUG    settings:tree.py:49 Num nodes in layer: 9
DEBUG    settings:tree.py:29 Generating node for layer: 3
DEBUG    settings:rational.py:53 Power is an integer: 3
DEBUG    settings:rational.py:56 Results: 64/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 4 ** 3 = 64
DEBUG    settings:rational.py:53 Power is an integer: 3
DEBUG    settings:rational.py:56 Results: 64/1
DEBUG    settings:tree.py:49 Num nodes in layer: 27
DEBUG    settings:test_algo.py:33 Created Tree Result: 
-- HEAD --
([[T(n/1), Cost: c(n/0)^2]], 'c(n/0)^2')
-- Layer 1 --
-- Total cost: ((3/4096))c(n/64)^2 --
[[T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2], [T(n/4), Cost: c(n/64)^2]]
-- Layer 2 --
-- Total cost: ((9/65536))c(n/256)^2 --
[[T(n/16), Cost: c(n/256)^2], [T(n/16), Cost: c(n/256)^2], [T(n/16), Cost: c(n/256)^2], [T(n/16), Cost: c(n/256)^2], [T(n/16), Cost: c(n/256)^2], [T(n/16), Cost: c(n/256)^2], [T(n/16), Cost: c(n/256)^2], [T(n/16), Cost: c(n/256)^2], [T(n/16), Cost: c(n/256)^2]]
-- Layer 3 --
-- Total cost: ((1/12288))c(n/576)^2 --
[[T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2], [T(n/64), Cost: c(n/576)^2]]

PASSED                                                                   [ 50%]
test/test_algo.py::test_cnbc_func1 
-------------------------------- live log call ---------------------------------
DEBUG    settings:test_algo.py:38 Testing function: T(n) = T(n-1) + n
DEBUG    settings:function.py:125 Printing function match: n
DEBUG    settings:function.py:48 Subtraction expression found in incoming function
DEBUG    settings:function.py:83 Printing match: T(n-1)
DEBUG    settings:tree.py:29 Generating node for layer: 0
DEBUG    settings:rational.py:53 Power is an integer: 0
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 1 ** 0 = 1
DEBUG    settings:rational.py:53 Power is an integer: 0
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:49 Num nodes in layer: 1
DEBUG    settings:tree.py:29 Generating node for layer: 1
DEBUG    settings:rational.py:53 Power is an integer: 1
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 1 ** 1 = 1
DEBUG    settings:rational.py:53 Power is an integer: 1
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:49 Num nodes in layer: 1
DEBUG    settings:tree.py:29 Generating node for layer: 2
DEBUG    settings:rational.py:53 Power is an integer: 2
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 1 ** 2 = 1
DEBUG    settings:rational.py:53 Power is an integer: 2
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:49 Num nodes in layer: 1
DEBUG    settings:tree.py:29 Generating node for layer: 3
DEBUG    settings:rational.py:53 Power is an integer: 3
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 1 ** 3 = 1
DEBUG    settings:rational.py:53 Power is an integer: 3
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:49 Num nodes in layer: 1
DEBUG    settings:test_algo.py:41 Created Tree Result: 
-- HEAD --
([[T(n-1), Cost: 1(n-0)^1]], '1(n-0)^1')
-- Layer 1 --
-- Total cost: 1(n-2)^1 --
[[T(n-1), Cost: 1(n-2)^1]]
-- Layer 2 --
-- Total cost: 1(n-4)^1 --
[[T(n-1), Cost: 1(n-4)^1]]
-- Layer 3 --
-- Total cost: 1(n-6)^1 --
[[T(n-1), Cost: 1(n-6)^1]]

PASSED                                                                   [ 66%]
test/test_algo.py::test_cnbc_func2 
-------------------------------- live log call ---------------------------------
DEBUG    settings:test_algo.py:46 Testing function: T(n) = 2T(n-1) + 1
DEBUG    settings:function.py:141 Printing constant function match: 1
DEBUG    settings:function.py:48 Subtraction expression found in incoming function
DEBUG    settings:function.py:83 Printing match: 2T(n-1)
DEBUG    settings:tree.py:29 Generating node for layer: 0
DEBUG    settings:rational.py:53 Power is an integer: 0
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 1 ** 0 = 1
DEBUG    settings:rational.py:53 Power is an integer: 0
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:49 Num nodes in layer: 1
DEBUG    settings:tree.py:29 Generating node for layer: 1
DEBUG    settings:rational.py:53 Power is an integer: 1
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 1 ** 1 = 1
DEBUG    settings:rational.py:53 Power is an integer: 1
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:49 Num nodes in layer: 2
DEBUG    settings:tree.py:29 Generating node for layer: 2
DEBUG    settings:rational.py:53 Power is an integer: 2
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 1 ** 2 = 1
DEBUG    settings:rational.py:53 Power is an integer: 2
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:49 Num nodes in layer: 4
DEBUG    settings:tree.py:29 Generating node for layer: 3
DEBUG    settings:rational.py:53 Power is an integer: 3
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 1 ** 3 = 1
DEBUG    settings:rational.py:53 Power is an integer: 3
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:49 Num nodes in layer: 8
DEBUG    settings:test_algo.py:49 Created Tree Result: 
-- HEAD --
([[T(n-1), Cost: 1(n-0)^1]], '1(n-0)^1')
-- Layer 1 --
-- Total cost: (1)1(n-2)^1 --
[[T(n-1), Cost: 1(n-2)^1], [T(n-1), Cost: 1(n-2)^1]]
-- Layer 2 --
-- Total cost: (1)1(n-4)^1 --
[[T(n-1), Cost: 1(n-4)^1], [T(n-1), Cost: 1(n-4)^1], [T(n-1), Cost: 1(n-4)^1], [T(n-1), Cost: 1(n-4)^1]]
-- Layer 3 --
-- Total cost: ((4/3))1(n-6)^1 --
[[T(n-1), Cost: 1(n-6)^1], [T(n-1), Cost: 1(n-6)^1], [T(n-1), Cost: 1(n-6)^1], [T(n-1), Cost: 1(n-6)^1], [T(n-1), Cost: 1(n-6)^1], [T(n-1), Cost: 1(n-6)^1], [T(n-1), Cost: 1(n-6)^1], [T(n-1), Cost: 1(n-6)^1]]

PASSED                                                                   [ 83%]
test/test_algo.py::test_cnbc_func3 
-------------------------------- live log call ---------------------------------
DEBUG    settings:test_algo.py:54 Testing function: T(n) = T(n-2) + n^2
DEBUG    settings:function.py:125 Printing function match: n^2
DEBUG    settings:function.py:48 Subtraction expression found in incoming function
DEBUG    settings:function.py:83 Printing match: T(n-2)
DEBUG    settings:tree.py:29 Generating node for layer: 0
DEBUG    settings:rational.py:53 Power is an integer: 0
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 2 ** 0 = 1
DEBUG    settings:rational.py:53 Power is an integer: 0
DEBUG    settings:rational.py:56 Results: 1/1
DEBUG    settings:tree.py:49 Num nodes in layer: 1
DEBUG    settings:tree.py:29 Generating node for layer: 1
DEBUG    settings:rational.py:53 Power is an integer: 1
DEBUG    settings:rational.py:56 Results: 2/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 2 ** 1 = 2
DEBUG    settings:rational.py:53 Power is an integer: 1
DEBUG    settings:rational.py:56 Results: 2/1
DEBUG    settings:tree.py:49 Num nodes in layer: 1
DEBUG    settings:tree.py:29 Generating node for layer: 2
DEBUG    settings:rational.py:53 Power is an integer: 2
DEBUG    settings:rational.py:56 Results: 4/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 2 ** 2 = 4
DEBUG    settings:rational.py:53 Power is an integer: 2
DEBUG    settings:rational.py:56 Results: 4/1
DEBUG    settings:tree.py:49 Num nodes in layer: 1
DEBUG    settings:tree.py:29 Generating node for layer: 3
DEBUG    settings:rational.py:53 Power is an integer: 3
DEBUG    settings:rational.py:56 Results: 8/1
DEBUG    settings:tree.py:30 Denominator of recursive size: 2 ** 3 = 8
DEBUG    settings:rational.py:53 Power is an integer: 3
DEBUG    settings:rational.py:56 Results: 8/1
DEBUG    settings:tree.py:49 Num nodes in layer: 1
DEBUG    settings:test_algo.py:57 Created Tree Result: 
-- HEAD --
([[T(n-1), Cost: 1(n-0)^2]], '1(n-0)^2')
-- Layer 1 --
-- Total cost: 1(n-16)^2 --
[[T(n-2), Cost: 1(n-16)^2]]
-- Layer 2 --
-- Total cost: 1(n-64)^2 --
[[T(n-4), Cost: 1(n-64)^2]]
-- Layer 3 --
-- Total cost: 1(n-144)^2 --
[[T(n-8), Cost: 1(n-144)^2]]

PASSED                                                                   [100%]

======================= 6 passed, 2 deselected in 0.03s ========================
